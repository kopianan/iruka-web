@using Iruka.Models;
@model Iruka.Models.UserDTO

@{
    ViewBag.Title = "Edit User";
}

@section css{
    <link href="~/Css/avatar-upload.min.css" rel="stylesheet" />
}

@section js{
    <script src="~/Scripts/js/user.min.js"></script>
}

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    @Html.HiddenFor(model => model.Id)
    @Html.HiddenFor(m => m.Picture, new { @id = "PicturePath" })
    @Html.HiddenFor(m => m.Base64URL, new { @id = "Base64URL" })

    <div class="row">
        <div class="col-6 grid-margin stretch-card">
            <div class="card">
                <div class="card-body">
                    <h2>
                        Edit User
                        <a href="/Account/InternalUserRegister/"><i class="fa fa-arrow-circle-left float-right" aria-hidden="true"></i></a>
                    </h2>
                    <hr />
                    <div class="form-group row">
                        <div class="col-12">
                            <div class="avatar-upload">
                                <div class="avatar-edit">
                                    <input type='file' id="imageUpload" accept=".png, .jpg, .jpeg" />
                                    <label for="imageUpload"></label>
                                </div>
                                <div class="avatar-preview">
                                    @{
                                        if (Model.Picture == null || Model.Picture == String.Empty)
                                        {
                                            <div id="imagePreview" style="background-image: url('/Media/avatar-placeholder.png');">
                                            </div>
                                        }
                                        else
                                        {
                                            <div id="imagePreview" style="background-image: url('@Model.Picture');">
                                            </div>
                                        }
                                    }
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="form-group row">
                        @Html.LabelFor(m => m.InternalRoleEnum, new { @class = "col-12 control-label" })
                        <div class="col-12">
                            @Html.EnumDropDownListFor(m => m.InternalRoleEnum, new { @class = "form-control" })
                            @Html.ValidationMessageFor(m => m.InternalRoleEnum, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group row">
                        @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label col-12" })
                        <div class="col-12">
                            @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group row">
                        @Html.LabelFor(model => model.PhoneNumber, htmlAttributes: new { @class = "control-label col-12" })
                        <div class="col-12">
                            @Html.EditorFor(model => model.PhoneNumber, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.PhoneNumber, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group row">
                        @Html.LabelFor(model => model.Address, htmlAttributes: new { @class = "control-label col-12" })
                        <div class="col-12">
                            @Html.TextAreaFor(model => model.Address, htmlAttributes: new { @class = "form-control", rows = 2 })
                            @Html.ValidationMessageFor(model => model.Address, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group row">
                        @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label col-12" })
                        <div class="col-12">
                            @Html.TextAreaFor(model => model.Description, htmlAttributes: new { @class = "form-control", rows = 2 })
                            @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group row">
                        <div class="col-12">
                            <button type="submit" class="btn btn-success float-right"><i class="fa fa-floppy-o" aria-hidden="true"></i> Save Changes</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
}